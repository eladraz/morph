/*
 * Copyright (c) 2008-2016, Integrity Project Ltd. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * Neither the name of the Integrity Project nor the names of its contributors
 * may be used to endorse or promote products derived from this software
 * without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE
 */

#ifndef __TBA_CLR_RUNNABLE_STACK_H
#define __TBA_CLR_RUNNABLE_STACK_H

/*
 * Stack.h
 *
 * Contains function for stack handling
 *
 * Author: Elad Raz <e@eladraz.com>
 */
#include "xStl/types.h"
#include "xStl/data/list.h"
#include "xStl/data/smartptr.h"
#include "data/ElementType.h"
#include "compiler/StackEntity.h"

/*
 * Stack implementation using link-list
 *
 * NOTE: This class is not thread-safe
 */
template <class T, class Itr>
class StackInfrastructor {
public:
    // Default constructor will auto-generated by the compiler

    /*
     * Pop a value from the stack
     *
     * output - Will be filled with the top-of-the stack variable
     *
     * Throw exception if the stack is empty
     */
    // Deprecated! Unsafe function.
    // void pop(T& output);

    /*
     * Remove elements from the top-of-stack
     * amount - How many elements to remove
     *
     * Throw exception if the stack contains less than 'amount' elements
     */
    void pop2null(uint amount = 1);

    /*
     * Peek into the last element in the stack
     */
    const T& peek() const;

    /*
     * Return a direct pointer into an index
     * Throw exception if there stack isn't full
     */
    T& getArg(uint index);

    /*
     * Get the top-of-stack element
     */
    T& tos();

    /*
     * Return true if the stack is empty
     */
    bool isEmpty() const;
    uint getStackCount() const;

    /*
     * Push a variable into the stack
     *
     * var - The new variable to be pushed.
     *
     * Throw exception in debug mode if the size of the stack exceed the
     * excpected stack's number of elements
     */
    void push(const T& var);

    /*
     * TODO! Protect these methods
     *
     * Return the stack itself and iterator to TOS. Used in exception-handling
     * for checking the position of top stack for reverting.
     */
    cList<T>& getList();
    const Itr getTosPosition();

    /*
     * Revert the stack into the marker returned by getTosPosition()
     */
    void revertStack(const Itr& pos);

    /*
     * Delete the stack
     */
    void clear();

private:
    // The stack itself.
    cList<T> m_stack;
};

// Forward deceleration
class StackEntity;

// Default stack base on Variable
//typedef StackInfrastructor<ElementType, cList<ElementType>::iterator> Stack;
// Compiler stack representation
typedef StackInfrastructor<StackEntity, cList<StackEntity>::iterator> Stack;
// Reference object into the stack
//typedef cSmartPtr<Stack> StackPtr;

// And include template implementation
#include "Stack.inl"

#endif // __TBA_CLR_RUNNABLE_STACK_H
