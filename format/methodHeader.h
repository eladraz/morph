/*
 * Copyright (c) 2008-2016, Integrity Project Ltd. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * Neither the name of the Integrity Project nor the names of its contributors
 * may be used to endorse or promote products derived from this software
 * without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE
 */

#ifndef __TBA_CLR_FORMAT_METHODHEADER_H
#define __TBA_CLR_FORMAT_METHODHEADER_H

/*
 * methodHeader.h
 *
 * Each method can contains information regarding to the local-variables /
 * exception handling and more "clause".
 *
 * Author: Elad Raz <e@eladraz.com>
 */
#include "xStl/types.h"
#include "xStl/data/string.h"
#include "xStl/data/list.h"
#include "xStl/stream/forkStream.h"
#include "xStl/stream/stringerStream.h"
#include "format/coreHeadersTypes.h"

#ifdef TRACED_CLR
/*
 * Forward deceleration for output streams
 */
class MethodHeader;
cStringerStream& operator << (cStringerStream& out,
                              const MethodHeader& object);
#endif // TRACED_CLR

/*
 * Method header might contains either tiny format, fat format or couple of
 * "data-sections". The class read the entire method information, including
 * all the different headers and body.
 */
class MethodHeader {
public:
    /*
     * Constructor. Read the function header and gets a pointer to the function
     * instruction set.
     *
     * stream - Stream which points to the RVA of the function.
     */
    MethodHeader(const cForkStreamPtr& stream);

    /*
     * Return a stream which points to the beginning of the function instruction
     * set.
     */
    const cForkStreamPtr& getFunction() const;

    /*
     * Return the length of the instruction set of the function in bytes.
     */
    uint getFunctionLength() const;

    // There aren't any
    enum { NO_LOCALS = 0};

    /*
     * Return a pointer into the StandAloneSigTable which describes the local-
     * variables in the function.
     * Of course, the StandAloneSigTable is only a reference into "Blob" which
     * has a "LocalVarSignature" data
     *
     * NOTE: A value of NO_LOCALS means that there aren't any locals.
     */
    mdToken getLocals() const;

    /*
     * Returns whether this method should initialize its locals to their default values
     */
    bool isInitLocals() const;

    /*
     * The exception-handling data-struct
     */
    #pragma pack(push)
    #pragma pack(1)
    struct ExceptionHandlingClause {
        // Default constructor. Reset the m_stackPosition to null
        ExceptionHandlingClause();

        // Copy-constructor and operator = will auto-generated by the compiler

        // Flags, See CorExceptionFlag, See ExceptionType
        uint32 flags;
        // Offset in bytes of try block from start of the header.
        uint32 tryOffset;
        // Length in bytes of the try block
        uint32 tryLength;
        // Location of the handler for this try block
        uint32 handlerOffset;
        // Size of the handler code in bytes
        uint32 handlerLength;
        // Meta data token for a type-based exception handler
        // Offset in method body for filter-based exception handler
        mdToken classTokenOrFilterOffset;

        bool operator> (const ExceptionHandlingClause& other) const;
    };
    // The types for the different EH handler
    enum ExceptionType {
        // A typed exception clause
        ClauseCatch = 0x00,
        // An exception filter and handler clause
        ClauseFilter = 0x01,
        // A finally clause
        ClauseFinally = 0x02,
        // Fault clause (finally that is called on exception only)
        ClauseFault = 0x04,
    };
    // The list of handlers
    typedef cList<ExceptionHandlingClause> ExceptionHandlingClauseList;
    #pragma pack(pop)

    /*
     * Return the exception handling list
     */
    const ExceptionHandlingClauseList& getExceptionsHandlers() const;

    /*
     * Return the stream absolute position at start. This position is used in
     * order to calculate the absolute function position from start.
     * For example:
     *   In order to seek 0xD8 bytes from the beginning the function use the
     *   following code:
     *      m_stream->seek(m_methodHeader->getMethodStreamStartAddress() + 0xD8,
     *                     basicInput::IO_SEEK_SET);
     */
    uint getMethodStreamStartAddress() const;


    /*
     * Test whether a handler is inside a try-catch block 'block'
     *
     * block - The block to be tested
     * offset - The absolute function offset from the begining:
     *               m_stream-getPointer() - getMethodStreamStartAddress()
     */
    static bool isOffsetInTryBlock(const ExceptionHandlingClause& block,
                                   uint offset);

private:
    #ifdef TRACED_CLR
    // Anyone need a friend
    friend cStringerStream& operator << (cStringerStream& out,
                                         const MethodHeader& object);
    #endif //TRACED_CLR

    // The different method
    enum MethodType {
        // The method contain only the tiny-format
        METHOD_TINY_FORMAT = 2,
        // FatFormatHeader follows the tiny header
        METHOD_FAT_FORMAT = 3
    };

    #pragma pack(push)
    #pragma pack(1)
    /*
     * Tiny-format start the method-header. For method which contains local
     * variables, exceptions, extra-data sections or stack which bigger than
     * 8 entries uses the FatFormatHeader
     */
    union TinyFormatHeader {
        struct {
            // See MethodType
            unsigned flags : 2;
            // Size of the method body immediately following this header.
            // Used only when the size of the method is less than 2^6 bytes
            unsigned codeSize : 6;
        } m_bits;
        // The packet data
        uint8 m_packed;
    };

    /*
     * Contains additional information (Everything but the 'size') which cannot
     * be stored at the TinyFormatHeader
     */
    struct FatFormatHeader {
        // Flags
        unsigned flags    : 12;
        // Size of this header expressed as the count of 4-byte integers occupied
        unsigned size     :  4;
        // Maximum number of items (I4, I, I8, obj..) on the operand stack
        unsigned maxStack : 16;
        // Size in bytes of the actual method body
        uint32 codeSize;
        // Token that indicates the signature of the local vars (0 means none)
        uint32 localVarSigTok;
    };

    /*
     * Contains the tiny exception-handling clause
     */
    struct TinyExceptionHandlingClause {
        // Flags, See CorExceptionFlag
        uint16 flags;
        // Offset in bytes of try block from start of the header.
        uint16 tryOffset;
        // Length in bytes of the try block
        uint8 tryLength;
        // Location of the handler for this try block
        uint16 handlerOffset;
        // Size of the handler code in bytes
        uint8 handlerLength;
        // Meta data token for a type-based exception handler
        // Offset in method body for filter-based exception handler
        mdToken classTokenOrFilterOffset;
    };

    /*
     * Contains the fat exception-handling clause
     */
    typedef ExceptionHandlingClause FatExceptionHandlingClause;
    #pragma pack(pop)

    // The class member aren't 1x1 copy of the file-format, it's saved as
    // processed information which will be useful for the CLR

    // A stream points to the beginning of the function
    cForkStreamPtr m_stream;
    // The length of the function
    uint m_length;
    // The exception-handling handlers list
    ExceptionHandlingClauseList m_exceptions;
    // The local variables. See getLocals()
    mdToken m_locals;
    // The start address of the function relative to the stream beginning
    uint m_startAddress;
    // True if this method should initialize the locals. False if not
    bool m_initLocals;
};

#endif // __TBA_CLR_FORMAT_METHODHEADER_H
