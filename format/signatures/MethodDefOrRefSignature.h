/*
 * Copyright (c) 2008-2016, Integrity Project Ltd. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * Neither the name of the Integrity Project nor the names of its contributors
 * may be used to endorse or promote products derived from this software
 * without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE
 */

#ifndef __TBA_CLR_FORMAT_SIGNATURES_METHODDEFORREFSIGNATURE_H
#define __TBA_CLR_FORMAT_SIGNATURES_METHODDEFORREFSIGNATURE_H

/*
 * MethodDefOrRefSignature.h
 *
 * Parse the blob of type "MethodDefSig"
 *
 * Author: Elad Raz <e@eladraz.com>
 */
#include "xStl/types.h"
#include "xStl/data/array.h"
#include "xStl/data/smartptr.h"
#include "xStl/stream/basicIO.h"
#include "xStl/stream/stringerStream.h"
#include "data/ElementType.h"
#include "runnable/ResolverInterface.h"

/*
 * Forward deceleration for output streams
 */
#ifdef TRACED_CLR
class MethodDefOrRefSignature;
cStringerStream& operator << (cStringerStream& out,
                              const MethodDefOrRefSignature& object);
#endif // TRACED_CLR

/*
 * A MethodDefSig is indexed by the Method.Signature column. It captures
 * the signature of a method or global function.
 * A MethodRefSig is indexed by the MemberRef.Signature column. This provides
 * the callsite Signature for a method. Normally, this callsite Signature
 * shall match exactly the Signature specified in the definition of the target
 * method. For example, if a method Foo is defined that takes two uint32s and
 * returns void; then any callsite shall index a signature that takes exactly
 * two uint32s and returns void. In this case, the syntax chart for a
 * MethodRefSig is identical with that for a MethodDefSig.
 * The Signature at a callsite differs from that at its definition, only for
 * a method with the VARARG calling convention. In this case, the callsite
 * Signature is extended to include info about the extra VARARG arguments
 * (for example, corresponding to the “...” in C syntax).
 */
class MethodDefOrRefSignature {
public:
    // The different encoding types
    typedef enum {
        // See m_hasThis
        HASTHIS      = 0x20,
        // See m_explicit
        EXPLICITTHIS = 0x40,

        // Different calling convention
        // See Calling-convention

        // Normal function calling
        CALLCONV_DEFAULT = 0x0,
        // Variable-length argument call
        CALLCONV_VARARG  = 0x5,
        // The stack should be poped by the caller
        UNMANAGED_CALLCONV_CDECL     = 0x1,
        // The stack is poped by the function
        UNMANAGED_CALLCONV_STDCALL   = 0x2,
        // ECX should contains 'this' pointer
        UNMANAGED_CALLCONV_THISCALL  = 0x3,
        // FastCall, arguments transfer by registers
        UNMANAGED_CALLCONV_FASTCALL  = 0x4,

        // Microsoft Specific. Taken from CorHdr.h
        IMAGE_CEE_CS_CALLCONV_FIELD     = 0x6,
        IMAGE_CEE_CS_CALLCONV_PROPERTY  = 0x8,
    } CallingConvention;


    /*
     * Constructor. Read from the #Blob stream position by 'stream' the method
     * signature
     */
    MethodDefOrRefSignature(basicInput& stream, mdToken apartmentId, const ResolverInterface& resolverInterface);

    /*
     * Explicit constructor
     */
    MethodDefOrRefSignature(ElementType returnType,
                            ElementsArrayType params,
                            bool hasThis,
                            bool explicitThis,
                            CallingConvention callingConvention);

    // Copy-constructor and operator = will auto-generated by the compiler

    /*
     * Return the type of the return method type.
     */
    const ElementType& getReturnType() const;

    /*
     * Return the list of all method's parameters
     */
    const ElementsArrayType& getParams() const;


    /*
     * Return true if the method has this (See 'instance' keyword)
     */
    bool isHasThis() const;

    /*
     * Return true if the method has explicit this (See 'explicit' keyword)
     */
    bool isExplicitThis() const;

    /*
     * Return true if the method has a variable number of argument (See 'vararg'
     * calling convenstion)
     */
    CallingConvention getCallingConvention() const;

    /*
     * Return true iff the current method signature equals to other method
     * signature
     */
    bool operator == (const MethodDefOrRefSignature& other) const;

    // Special class construction methods

    /*
     * Generate new static method which returns "returnedType" element
     */
    MethodDefOrRefSignature(const ElementType& returnedType);

    /*
     * Add argument into the class signature
     */
    void appendArgument(const ElementType& newParam);

    /*
     * Update method signature
     */
    void hashSignature(cDigest& digest, const ResolverInterface& resolver) const;

private:
    // Set to true if the method has this pointer
    // Used to encode the keyword 'instance' in the calling convention
    bool m_hasThis;
    // Used to encode the keyword explicit in the calling convention
    bool m_explicit;

    // The calling convention
    CallingConvention m_callingConvention;

    // The type of the return method type
    ElementType m_returnType;

    // The list of all method's parameters
    ElementsArrayType m_params;
};

// The reference countable object
typedef cSmartPtr<MethodDefOrRefSignature> MethodDefOrRefSignaturePtr;

#endif // __TBA_CLR_FORMAT_SIGNATURES_METHODDEFORREFSIGNATURE_H
