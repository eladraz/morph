using System;

namespace TestSimpleTypes2
{
    /*
     * The most simplest struct. Contains only three integers
     */
    public struct Elements {
        public System.SByte m_int8;
        public System.Int16 m_int16;
        public System.Int32 m_int32;

        public static int Magic = 42;
    }

    /*
     * Class which contains methods
     */
    public struct PointInSpace
    {
        /// <summary>
        /// Constructor. Generate a new space.
        /// </summary>
        /// <param name="x">The x's axis coordinate</param>
        /// <param name="y">The y's axis coordinate</param>
        /// <param name="z">The z's axis coordinate</param>
        public PointInSpace(int x, int y, int z)
        {
            this.x = x;
            this.y = y;
            this.z = z;
        }

        /// Copy-constructor and operator = will auto generated by the compiler

        /// <returns>Return the X's coordinate</returns>
        public int getX() { return this.x; }
        /// <returns>Return the Y's coordinate</returns>
        public int getY() { return this.y; }
        /// <returns>Return the Z's coordinate</returns>
        public int getZ() { return this.z; }

        /// <summary>Changes the X's coordinate</summary><param name="newX">The new X's coordinate</param>
        public void setX(int newX) { this.x = newX; }
        /// <summary>Changes the Y's coordinate</summary><param name="newX">The new Y's coordinate</param>
        public void setY(int newY) { this.y = newY; }
        /// <summary>Changes the Z's coordinate</summary><param name="newX">The new Z's coordinate</param>
        public void setZ(int newZ) { this.z = newZ; }

        // Private members
        private int x, y, z;
    }

    /*
     * Class which contains object variables
     */
    public struct Car
    {
        /// <summary>
        /// Constructor
        /// </summary>
        public Car(PointInSpace pt,
                   string name)
        {
            this.m_point = pt;
            this.m_name = name;
            this.m_elements = new Elements();
        }

        // The point of the car
        public PointInSpace m_point;
        // Some of the vehicle parameters
        public Elements m_elements;
        // The name of the car
        public string m_name;
    }

	/// <summary>
	/// Summary description for Class1.
    /// Assume TestSimpleTypes #1 passes
    ///
    /// Test for:
    ///     Value-types
    ///     Classes
    ///     Arraies
    /// </summary>
    unsafe class Test
    {
        /// <summary>
        /// The main entry point for the application.
        /// Invoke calls to all other tests by order.
        /// </summary>
        [STAThread]
        static void Main(string[] args)
        {
            System.Console.WriteLine("TestSimpleTypes2::Test::Main()");
            System.Console.WriteLine();
            System.Console.WriteLine("Executing tests...");
            testElements();
            testPoint();
            testCar();
            testArraies();
            testArraiesPointers();
            testComplexCopy();
            System.Console.WriteLine();
            System.Console.WriteLine();
            System.Console.WriteLine("OK!");
        }

        /// <summary>
        /// The first test for value-types. Check accessing fields,
        /// static fields, copying fields from one object to another.
        /// </summary>
        static void testElements()
        {
            System.Console.WriteLine("Execute testElements()...");
            Elements element;
            element.m_int32 = element.m_int16 = element.m_int8 = 0;
            Elements obj = new Elements();
            obj = element;
            if ((obj.m_int16 != 0) ||
                (obj.m_int32 > 0) ||
                (obj.m_int8 < 0))
                System.Console.WriteLine("  Error!");
            else
                System.Console.WriteLine("  PASS");
            obj.m_int32 = 42;

            if ((element.m_int16 != 0) ||
                (element.m_int32 > 0) ||
                (element.m_int8 < 0) ||
                (obj.m_int32 == 0) ||
                (obj.m_int32 != 42) ||
                (obj.m_int16 < 0) ||
                (obj.m_int8 > 0))
                System.Console.WriteLine("  Error!");
            else
                System.Console.WriteLine("  PASS");

            if (obj.m_int32 == Elements.Magic)
                System.Console.WriteLine("  PASS");
            else
                System.Console.WriteLine("  Error!");

            Elements copy = obj;
            obj.m_int16++;

            if ((copy.m_int16 == 0) &&
                (obj.m_int16 == 1))
                System.Console.WriteLine("  PASS  (Copy-on-write)");
            else
                System.Console.WriteLine("  Error! copy-on-write");

            System.Console.WriteLine("  Class " + obj.ToString() +
                " passed all tests...");
        }

        static void testPoint()
        {
            System.Console.WriteLine("Execute testPoint()...");
            // Generate new object
            PointInSpace a = new PointInSpace(1,0,0);

            if ((a.getZ() == 0) &&
                (a.getY() == 0) &&
                (a.getX() == 1))
                System.Console.WriteLine("  PASS");
            else
                System.Console.WriteLine("  ERROR1");

            PointInSpace b = a;

            if ((b.getZ() == 0) &&
                (b.getY() == 0) &&
                (b.getX() == 1))
                System.Console.WriteLine("  PASS");
            else
                System.Console.WriteLine("  ERROR2");

            if (a.Equals(b))
                System.Console.WriteLine("  PASS");
            else
                System.Console.WriteLine("  ERROR3");

            a.setY(1);
            if (!(a.Equals(b)))
                System.Console.WriteLine("  PASS");
            else
                System.Console.WriteLine("  ERROR4");

            System.Console.WriteLine("  Class " + a.ToString() +
                                     " passed all tests...");
        }

        static void testCar()
        {
            System.Console.WriteLine("Execute testCar()...");
            Car myCar = new Car(new PointInSpace(12,15,1), "Chevy");
            // Test car name
            if ((myCar.m_name == "Chevy") &&
                (myCar.m_name != "MAMA"))
                System.Console.WriteLine("  PASS  " + myCar.m_name);
            else
                System.Console.WriteLine("  ERROR1");

            if ((myCar.m_point.getX() == 12) &&
                (myCar.m_point.getY() == 15) &&
                (myCar.m_point.getZ() == 1))
                System.Console.WriteLine("  PASS  " + myCar.m_point.ToString());
            else
                System.Console.WriteLine("  ERROR2");

            // Test copying and changing methods...
            Car otherCar = myCar;
            otherCar.m_name = "Chevy++";
            otherCar.m_point.setX(1);
            otherCar.m_point.setY(1);
            otherCar.m_point.setZ(1);

            // Test previous car
            if ((myCar.m_name == "Chevy") &&
                (myCar.m_point.getX() == 12) &&
                (myCar.m_point.getY() == 15) &&
                (myCar.m_point.getZ() == 1))
                System.Console.WriteLine("  PASS");
            else
                System.Console.WriteLine("  ERROR3 " + myCar.m_name);

            // Test current car
            if ((otherCar.m_name == "Chevy++") &&
                (otherCar.m_point.getX() == 1) &&
                (otherCar.m_point.getY() == 1) &&
                (otherCar.m_point.getZ() == 1))
                System.Console.WriteLine("  PASS " + otherCar.m_name +
                                         "   " + myCar.m_name);
            else
                System.Console.WriteLine("  ERROR3");
        }

        static void testArraies()
        {
            System.Console.WriteLine("Execute testArraies()...");
            PointInSpace[] array = new PointInSpace[10];
            for (int i = 0; i < 10; i++)
            {
                array[i].setX((i << 4) | 1);
                array[i].setY((i << 4) | 2);
                array[i].setZ((i << 4) | 3);
            }

            bool isOK = true;
            for (int i = 0; i < 10; i++)
            {
                if (array[i].getX() != ((i << 4) | 1))
                    isOK = false;
                if (array[i].getY() != ((i << 4) | 2))
                    isOK = false;
                if (array[i].getZ() != ((i << 4) | 3))
                    isOK = false;
            }

            if (isOK)
                System.Console.WriteLine("  PASS");
            else
                System.Console.WriteLine("  ERROR");
        }

        static unsafe void testArraiesPointers()
        {
            System.Console.WriteLine("Execute testArraiesPointers()...");
            PointInSpace* array = stackalloc PointInSpace[10];

            int rnd = (new System.Random()).Next();
            array[9].setX(rnd);
            array[1].setX(0);
            if (array[9].getX() == rnd)
                System.Console.WriteLine("  PASS");
            else
                System.Console.WriteLine("  ERROR");

            for (int i = 0; i < 10; i++)
            {
                array[i].setX((i << 4) | 1);
                array[i].setY((i << 4) | 2);
                array[i].setZ((i << 4) | 3);
            }

            bool isOK = true;
            for (int i = 0; i < 10; i++)
            {
                if (array[i].getX() != ((i << 4) | 1))
                    isOK = false;
                if (array[i].getY() != ((i << 4) | 2))
                    isOK = false;
                if (array[i].getZ() != ((i << 4) | 3))
                    isOK = false;
            }

            if (isOK)
                System.Console.WriteLine("  PASS");
            else
                System.Console.WriteLine("  ERROR");

            int* intPtr = (int*)array;
            int next;
            for (int i = 0; i < 10; i++)
            {
                next = i << 4;
                for (int j = 0; j < 3; j++)
                {
                    next++;
                    if ((*intPtr) != next)
                        isOK = false;
                    intPtr++;
                }
            }

            PointInSpace* pt = (PointInSpace*)array;
            if ((array[0].getX() != pt->getX()) ||
                (array[0].getY() != pt->getY()) ||
                (array[0].getZ() != pt->getZ()))
                isOK = false;
            pt+= 3;
            if ((array[0].getX() == pt->getX()) ||
                (array[0].getY() == pt->getY()) ||
                (array[0].getZ() == pt->getZ()))
                isOK = false;
            if ((array[3].getX() != pt->getX()) ||
                (array[3].getY() != pt->getY()) ||
                (array[3].getZ() != pt->getZ()))
                isOK = false;

            pt->setX(2123);
            pt->setY(616);
            if ((array[3].getX() != 2123) ||
                (array[3].getY() != 616))
                isOK = false;

            /*
            pt[3] = array[0];

            if ((array[0].getX() != pt[3].getX()) ||
                (array[0].getY() != pt[3].getY()) ||
                (array[0].getZ() != pt[3].getZ()))
                isOK = false;

            array[0].setX(5555);
            if (pt[3].getX() == 5555)
                isOK = false;
                */

            if (isOK)
                System.Console.WriteLine("  PASS ");
            else
                System.Console.WriteLine("  ERROR1");
        }

        static void testComplexCopy()
        {
            System.Console.WriteLine("Execute testComplexCopy()...");
            Car myCar = new Car(new PointInSpace(1,1,1), "Razimobile");
            if ((myCar.m_point.getX() == 1) &&
                (myCar.m_point.getY() == 1) &&
                (myCar.m_point.getZ() == 1))
                System.Console.WriteLine("  PASS ");
            else
                System.Console.WriteLine("  ERROR");

            Elements elem;
            elem.m_int8 = 8;
            elem.m_int16 = 0x1616;
            elem.m_int32 = 0x32323232;
            myCar.m_elements = elem;

            if ((myCar.m_elements.m_int8 == 0x08) &&
                (myCar.m_elements.m_int16 == 0x1616) &&
                (myCar.m_elements.m_int32 == 0x32323232))
                System.Console.WriteLine("  PASS ");
            else
                System.Console.WriteLine("  ERROR");

            Car xCar = myCar;
            xCar.m_name = "Babylon";
            if (myCar.m_name == "Razimobile")
                System.Console.WriteLine("  PASS ");
            else
                System.Console.WriteLine("  ERROR");
        }
	}
}

